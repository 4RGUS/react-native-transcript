buildscript {
  ext.getExtOrDefault = { name ->
    if (rootProject.ext.has(name)) {
      return rootProject.ext.get(name)
    } else if (project.hasProperty("Transcription_" + name)) {
      return project.property("Transcription_" + name)
    } else {
      // Default values for backward compatibility
      switch (name) {
        case "kotlinVersion":
          return "1.6.10" 
        case "compileSdkVersion":
          return 31
        case "minSdkVersion":
          return 21
        case "targetSdkVersion":
          return 31
        default:
          throw new GradleException("Missing property $name and no default found")
      }
    }
  }

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.1.3"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${getExtOrDefault('kotlinVersion')}"
  }
}


apply plugin: "com.android.library"
apply plugin: "kotlin-android"

apply plugin: "com.facebook.react"

def getExtOrIntegerDefault(name) {
  if (rootProject.ext.has(name)) {
    return rootProject.ext.get(name)
  } else {
    switch (name) {
      case "compileSdkVersion": return 31
      case "minSdkVersion": return 21
      case "targetSdkVersion": return 31
      default: throw new GradleException("Property $name not found")
    }
  }
}

android {
  namespace "com.transcription"

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", "false"
  }

  buildFeatures {
    buildConfig true
  }

  buildTypes {
    debug {
      buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED",
        project.hasProperty("newArchEnabled") ? "true" : "false"
    }
    release {
      minifyEnabled false
      buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED",
        project.hasProperty("newArchEnabled") ? "true" : "false"
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main {
      java.srcDirs += [
        "generated/java",
        "generated/jni"
      ]
    }
  }
}

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  implementation "com.facebook.react:react-android"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

react {
  jsRootDir = file("../src/")
  libraryName = "Transcription"
  codegenJavaPackageName = "com.transcription"
}
